function [] = livePlotter(nodeIndex)
tic
display(newline)
display("---------------------MINTS---------------------")

currentDate= datetime('now','timezone','utc');

display(currentDate);
yamlFile =  '../mintsDefinitionsV2.yaml';

mintsDefinitions   = ReadYaml(yamlFile);

nodeIDs            = mintsDefinitions.nodeIDs;
dataFolder         = mintsDefinitions.dataFolder;


climateTargets     = mintsDefinitions.climateTargets;
pmTargets          = mintsDefinitions.pmTargets;
allTargets         = [climateTargets,pmTargets]


rawFolder          =  dataFolder + "/raw";
rawMatsFolder      =  dataFolder + "/rawMats";
updateFolder       =  dataFolder + "/liveUpdate/results/";
scanFolder         =  dataFolder + "/liveUpdate/scan/";
modelsFolder       =  dataFolder + "/modelsMats/UTDNodes/";

timeSpan           =  seconds(mintsDefinitions.timeSpan);
nodeID             =  nodeIDs{nodeIndex}.nodeID;
resultsFile        = modelsFolder+ "WSInitialV2.csv";

targets      = mintsDefinitions.targets;

todaysNodeFolder   = strcat("/*/*/",...
    num2str(year(currentDate),'%04d'),"/",...
    num2str(month(currentDate),'%02d'),"/",...
    num2str(day(currentDate),'%02d'),"/MINTS_")    ;

display(newline);
display("Data Folder Located      @ :"+ dataFolder);
display("Raw Data Located         @ :"+ rawFolder );
display("Raw DotMat Data Located  @ :"+ rawMatsFolder);
display("Update Data Located      @ :"+ updateFolder);
display("Results File Located     @ :"+ resultsFile);
display(newline)

%% Syncing Process
BME280     =  getSyncedDataV2(dataFolder,todaysNodeFolder ,nodeID,'BME280',timeSpan);
GPSGPGGA2  =  getSyncedDataV2(dataFolder,todaysNodeFolder ,nodeID,'GPSGPGGA2',timeSpan);
OPCN2      =  getSyncedDataV2(dataFolder,todaysNodeFolder ,nodeID,'OPCN2',timeSpan);
OPCN3      =  getSyncedDataV2(dataFolder,todaysNodeFolder ,nodeID,'OPCN3',timeSpan);

if isempty(BME280)||(isempty(OPCN2)&&isempty(OPCN3))
    display("No Data for Node:" +  nodeID)
    return;
end


%% Choosing Input Stack
liveStack = mintsDefinitions.liveStack;

display("Getting Node Data for Today");

concatStr  =  "mintsDataUTD   = synchronize(";
for stackIndex = 1: length(liveStack)
    if(height(eval(strcat(liveStack{stackIndex})))>2)
        concatStr = strcat(concatStr,liveStack{stackIndex},",");
    end
end
concatStr  = strcat(concatStr,"'union');");
display(concatStr)
eval(concatStr)

%% Choosing Input Stack
eval(strcat("climateInputs        = mintsDefinitions.climateStack_",nodeIDs{nodeIndex}.climateStack,";"));
eval(strcat("climateInputsCalib   = mintsDefinitions.climateInputsCalib_",nodeIDs{nodeIndex}.climateStack,";"));
eval(strcat("climateInputLabels   = mintsDefinitions.climateStackLabels_",nodeIDs{nodeIndex}.climateStack,";"));

eval(strcat("pmInputs             = mintsDefinitions.pmStack_",string(nodeIDs{nodeIndex}.pmStack),";"));
eval(strcat("pmInputsCorrected    = mintsDefinitions.pmInputsCorrected_",string(nodeIDs{nodeIndex}.pmStack),";"));
eval(strcat("pmInputLabels        = mintsDefinitions.pmStackLabels_",string(nodeIDs{nodeIndex}.pmStack),";"))
eval(strcat("pmAppends            = mintsDefinitions.pmAppends_",string(nodeIDs{nodeIndex}.pmStack),";"));
eval(strcat("pmAppendsCalib       = mintsDefinitions.pmAppendsCalib_",string(nodeIDs{nodeIndex}.pmStack),";"));

eval(strcat("sensorStack          = mintsDefinitions.sensorStack_",string(nodeIDs{nodeIndex}.pmStack),";"));
eval(strcat("csvStack             = mintsDefinitions.csvStack_",string(nodeIDs{nodeIndex}.pmStack),";"));

%% Defining Inputs
inCorrected  = correctionsUTDV2(mintsDataUTD);

% At this point I can load in the best model file
display("Loading Best Models")
[bestModels,bestModelsLabels,climateParamsNow] = readResultsNowV2(resultsFile,nodeID,targets,modelsFolder);

display("Climate Bounding")

% Probably and if Statement Goes here
inCorrected = checkBounds(inCorrected,nodeID,"LiveUpdate",modelsFolder,"liveUpdate");

if height(inCorrected)<5
    display("Sensor Error For:" +  nodeID)
    return;
end




inCorrected = boundCorrections(inCorrected,climateParamsNow);


%% Loading the appropriate models
% At this point new the best models are loaded

inCorrected.temperatureCalib = polyval(bestModels{1},...
    inCorrected.BME280_temperatureK) ;
inCorrected.pressureCalib    = polyval(bestModels{2},...
    inCorrected.BME280_pressureLog) ;
inCorrected.humidityCalib    = polyval(bestModels{3},...
    inCorrected.BME280_humidity) ;

pmInputsCombined             = [pmInputsCorrected,pmAppendsCalib];

[rows, columns] = find(isnan(table2array(inCorrected(:,pmInputsCombined))));

inCorrected(unique(rows),:) = [];



%% Dew Point Results
inDewPoint = table2array(inCorrected(:,climateInputsCalib));

inCorrected.dewPoint_predicted=predict(bestModels{4},inDewPoint);

inPM       = table2array(inCorrected(:,pmInputsCombined));

% Pm Models are coming after 5 
for n = 5: length(bestModels)
    display("Predicting " + targets{n})
    eval(strcat("inCorrected.",targets{n},"_predicted= " , "predict(bestModels{n},inPM);"));
end



%% Applying Corrections
inCorrected =  correctionsPM(inCorrected);

inCorrected.temperatureOut = inCorrected.temperatureCalib;
inCorrected.pressureOut    = 10.^(inCorrected.pressureCalib);
inCorrected.humidityOut    = inCorrected.humidityCalib;
inCorrected.dewPointOut    = inCorrected.dewPoint_predicted;


if isempty(GPSGPGGA2)
    inCorrected.GPSGPGGA2_latitudeCoordinate(:) = nan;
    inCorrected.GPSGPGGA2_longitudeCoordinate(:) = nan;
    inCorrected.GPSGPGGA2_altitude(:) = nan;
end

inCorrected.GPSGPGGA2_altitude(isnan(inCorrected.GPSGPGGA2_altitude))=...
                                        nodeIDs{nodeIndex}.altitude;
inCorrected.GPSGPGGA2_latitudeCoordinate(isnan(inCorrected.GPSGPGGA2_latitudeCoordinate))=...
                                        nodeIDs{nodeIndex}.latitude;
inCorrected.GPSGPGGA2_longitudeCoordinate(isnan(inCorrected.GPSGPGGA2_longitudeCoordinate))=...
                                        nodeIDs{nodeIndex}.longitude;

%% Checks

lat = rmmissing(inCorrected.GPSGPGGA2_latitudeCoordinate);
long = rmmissing(inCorrected.GPSGPGGA2_longitudeCoordinate);
if ~isnan(lat)
lat = lat(end);
long = long(end);
zip = getZip(lat,long);
    gpsString =  "(" + lat + "," + long +")" + " Zip Code: " +string(zip);  
else
    gpsString =  " ";
end 

preFigName = strrep(getPrintName(updateFolder,nodeID,currentDate,"daily"),".csv","")

%% Climate Graphs 
drawSummary1x3Title(...
    inCorrected.dateTime,inCorrected.temperatureOut,...,...
    nodeID,...
    "Date Time (UTC)",...
    "Atmospheric Temperature (K)",...
    strcat("Atmospheric Temperature - ",strrep(string(bestModelsLabels.versionStr(1)),"_","-")),...
    "Atmospheric Temperature Time Series",...
     preFigName +"_Temperature.png",...
    true,...
    0,120,gpsString)

drawSummary1x3Title(...
    inCorrected.dateTime,inCorrected.pressureOut,...,...
    nodeID,...
    "Date Time (UTC)",...
    "Atmospheric Pressure (mili Bar)",...
    strcat("Atmospheric Pressure: ",strrep(string(bestModelsLabels.versionStr(2)),"_","-")),...
    "Atmospheric Pressure Time Series",...
     preFigName+"_Pressure.png",...
    true,...
    975,1010,gpsString)


drawSummary1x3Title(...
    inCorrected.dateTime,inCorrected.humidityOut,...,...
    nodeID,...
    "Date Time (UTC)",...
    "Atmospheric Humidity (%)",...
    strcat("Atmospheric Humidity: ",strrep(string(bestModelsLabels.versionStr(3)),"_","-")),...
    "Atmospheric Humidity Time Series",...
     preFigName+"_Humidity.png",...
    true,...
    0,100,gpsString)

drawSummary1x3Title(...
    inCorrected.dateTime,inCorrected.dewPoint_predicted,...,...
    nodeID,...
    "Date Time (UTC)",...
    "Dew Point (K)",...
    strcat("Dew Point: ",strrep(string(bestModelsLabels.versionStr(4)),"_","-")),...
    "Dew Point Time Series",...
     preFigName+"_DewPoint.png",...
    true,...
    -20,100,gpsString)

%% Pm Graphs 

drawSummary1x3Title(...
    inCorrected.dateTime,inCorrected.pm1_palas_predicted,...,...
    nodeID,...
    "Date Time (UTC)",...
    "PM_{1} (\mug/m^{3})",...
    strcat("PM_{1}: ",strrep(string(bestModelsLabels.versionStr(5)),"_","-")),...
    "PM_{1} Time Series",...
     preFigName+"_PM1.png",...
    true,...
    0,40,gpsString)

drawSummary1x3Title(...
    inCorrected.dateTime,inCorrected.pm2_5_palas_predicted,...,...
    nodeID,...
    "Date Time (UTC)",...
    "PM_{2.5} (\mug/m^{3})",...
    strcat("PM_{2.5}: ",strrep(string(bestModelsLabels.versionStr(6)),"_","-")),...
    "PM_{2.5} Time Series",...
     preFigName+"_PM2_5.png",...
    true,...
    0,50,gpsString)

drawSummary1x3Title(...
    inCorrected.dateTime,inCorrected.pm4_palas_predicted,...,...
    nodeID,...
    "Date Time (UTC)",...
    "PM_{4} (\mug/m^{3})",...
    strcat("PM_{4}: ",strrep(string(bestModelsLabels.versionStr(7)),"_","-")),...
    "PM_{4} Time Series",...
     preFigName+"_PM4.png",...
    true,...
    0,60,gpsString)
drawSummary1x3Title(...
    inCorrected.dateTime,inCorrected.pm10_palas_predicted,...,...
    nodeID,...
    "Date Time (UTC)",...
    "PM_{10} (\mug/m^{3})",...
    strcat("PM_{10}: ",strrep(string(bestModelsLabels.versionStr(8)),"_","-")),...
    "PM_{10} Time Series",...
     preFigName+"_PM10.png",...
    true,...
    0,100,gpsString)

drawSummary3x3Title(...
    inCorrected.dateTime,inCorrected.pm1_palas_predicted,...
    inCorrected.dateTime,inCorrected.pm2_5_palas_predicted,...
    inCorrected.dateTime,inCorrected.pm10_palas_predicted,...
       strcat("PM_{1}  : ",strrep(string(bestModelsLabels.versionStr(5)),"_","-")),...
         strcat("PM_{2.5}: ",strrep(string(bestModelsLabels.versionStr(6)),"_","-")),...
          strcat("PM_{10} :  ",strrep(string(bestModelsLabels.versionStr(7)),"_","-")),...
            nodeID,"Date Time (UTC)","PM (\mug/m^{3})",... 
              75,...
               "Particulate Matter Summary Plot",...
                preFigName +"_PMSummary.png",gpsString)


%% UNCOMMENT ON EUROPA
contourOPCSummary3Title(...
    inCorrected,...
    nodeID,...
    "Date Time (UTC)",...
     "Particle Diametor",...
     "Contour Plot for Binned Particle Counts", preFigName +"_Contour.png",gpsString);

display(" ");

end

